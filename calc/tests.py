from django.test import TestCase
from django.test import Client
from sympy.physics.units import (convert_to,
    meter, centimeter, foot, second, kilogram, gram, newton, joule,
    pascal, psi, watt, pound, foot
)
from sympy.physics.units.systems.si import SI
from sympy import simplify
import json

# Create your tests here.
class OperationsTest(TestCase):
    def setUp(self):
        self.c = Client()

    def test_sum_operants(self):
        inputs = [
        # Length – MKS
        [['10', 'm'], '+', ['10', 'cm'], 'MKS', '10.1 m'],
        [['10', 'cm'], '+', ['10', 'ft'], 'MKS', '3.148 m'],
        [['10', 'ft'], '+', ['10', 'm'], 'MKS', '13.048 m'],

        # Length – CGS
        [['10', 'cm'], '+', ['10', 'm'], 'CGS', '1010 cm'],
        [['10', 'cm'], '+', ['10', 'ft'], 'CGS', '314.8 cm'],
        [['10', 'm'], '+', ['10', 'ft'], 'CGS', '1304.8 cm'],

        # Length – IMP
        [['10', 'ft'], '+', ['10', 'm'], 'IMP', '42.808399 ft'],
        [['10', 'ft'], '+', ['10', 'cm'], 'IMP', '10.328084 ft'],
        [['10', 'm'], '+', ['10', 'cm'], 'IMP', '33.136483 ft'],

        # Mass – MKS
        [['10', 'kg'], '+', ['1000', 'g'], 'MKS', '11 kg'],
        [['10', 'kg'], '+', ['1', 'slug'], 'MKS', '24.593903 kg'],
        [['1000', 'g'], '+', ['1', 'slug'], 'MKS', '15.593903 kg'],

        # Mass – CGS
        [['10', 'kg'], '+', ['1000', 'g'], 'CGS', '11000 g'],
        [['1', 'slug'], '+', ['1000', 'g'], 'CGS', '15593.902937 g'],
        [['1', 'slug'], '+', ['10', 'kg'], 'CGS', '24593.902937 g'],

        # Mass – IMP
        [['10', 'kg'], '+', ['1', 'slug'], 'IMP', '1.685218 slug'],
        [['1', 'slug'], '+', ['1000', 'g'], 'IMP', '1.068522 slug'],
        [['1000', 'g'], '+', ['10', 'kg'], 'IMP', '0.753739 slug'],

        # Velocity – MKS
        [['10', 'm/s'], '+', ['1000', 'cm/s'], 'MKS', '20 m/s'],
        [['10', 'm/s'], '+', ['10', 'ft/s'], 'MKS', '13.048 m/s'],
        [['1000', 'cm/s'], '+', ['10', 'ft/s'], 'MKS', '13.048 m/s'],

        # Velocity – CGS
        [['10', 'cm/s'], '+', ['1', 'm/s'], 'CGS', '110 cm/s'],
        [['10', 'ft/s'], '+', ['10', 'cm/s'], 'CGS', '314.8 cm/s'],
        [['10', 'ft/s'], '+', ['1', 'm/s'], 'CGS', '404.8 cm/s'],

        # Velocity – IMP
        [['10', 'ft/s'], '+', ['1', 'm/s'], 'IMP', '13.28084 ft/s'],
        [['1000', 'cm/s'], '+', ['10', 'ft/s'], 'IMP', '42.808399 ft/s'],
        [['10', 'm/s'], '+', ['10', 'ft/s'], 'IMP', '42.808399 ft/s'],

        # Acceleration – MKS
        [['10', 'm/s^2'], '+', ['1000', 'cm/s^2'], 'MKS', '20 m/s^2'],
        [['10', 'ft/s^2'], '+', ['1', 'm/s^2'], 'MKS', '4.048 m/s^2'],
        [['1000', 'cm/s^2'], '+', ['10', 'ft/s^2'], 'MKS', '13.048 m/s^2'],

        # Acceleration – CGS
        [['10', 'cm/s^2'], '+', ['1', 'm/s^2'], 'CGS', '110 cm/s^2'],
        [['10', 'ft/s^2'], '+', ['10', 'cm/s^2'], 'CGS', '314.8 cm/s^2'],
        [['10', 'ft/s^2'], '+', ['1', 'm/s^2'], 'CGS', '404.8 cm/s^2'],

        # Acceleration – IMP
        [['10', 'ft/s^2'], '+', ['1', 'm/s^2'], 'IMP', '13.28084 ft/s^2'],
        [['1000', 'cm/s^2'], '+', ['10', 'ft/s^2'], 'IMP', '42.808399 ft/s^2'],
        [['10', 'm/s^2'], '+', ['10', 'ft/s^2'], 'IMP', '42.808399 ft/s^2'],

        # Force – MKS
        [['10', 'N'], '+', ['1000000', 'dyne'], 'MKS', '20 N'],
        [['1', 'lbf'], '+', ['4', 'N'], 'MKS', '8.448222 N'],
        [['1', 'lbf'], '+', ['1000000', 'dyne'], 'MKS', '14.448222 N'],

        # Force – CGS
        [['10', 'N'], '+', ['1000000', 'dyne'], 'CGS', '2000000 dyn'],
        [['1', 'lbf'], '+', ['1000000', 'dyne'], 'CGS', '1444822.161526 dyn'],
        [['10', 'N'], '+', ['1', 'lbf'], 'CGS', '1444822.161526 dyn'],

        # Force – IMP
        [['1', 'lbf'], '+', ['4.44822', 'N'], 'IMP', '2 lbf'],
        [['1000000', 'dyne'], '+', ['1', 'lbf'], 'IMP', '3.248089 lbf'],
        [['10', 'N'], '+', ['1', 'lbf'], 'IMP', '3.248089 lbf'],

        # Energy – MKS
        [['10', 'J'], '+', ['1e7', 'erg'], 'MKS', '11 J'],
        [['1', 'ft*lbf'], '+', ['1.35582', 'J'], 'MKS', '2.711638 J'],
        [['10', 'ft*lbf'], '+', ['5', 'J'], 'MKS', '18.558179 J'],

        # Energy – CGS
        [['10', 'J'], '+', ['1e7', 'erg'], 'CGS', '110000000 erg'],
        [['1', 'ft*lbf'], '+', ['1.35582', 'J'], 'CGS', '27116379.483314 erg'],
        [['10', 'ft*lbf'], '+', ['5', 'J'], 'CGS', '185581794.83314 erg'],

        # Energy – IMP
        [['1', 'ft*lbf'], '+', ['1.35582', 'J'], 'IMP', '2.000002 ft*lbf'],
        [['10', 'J'], '+', ['1', 'ft*lbf'], 'IMP', '8.375621 ft*lbf'],
        [['10', 'ft*lbf'], '+', ['5', 'J'], 'IMP', '13.687811 ft*lbf'],

        # Pressure – MKS
        [['100000', 'Pa'], '+', ['100000', 'Ba'], 'MKS', '110000 Pa'],
        [['1', 'psi'], '+', ['6894.76', 'Pa'], 'MKS', '13789.517293 Pa'],
        [['1', 'Ba'], '+', ['100000', 'Pa'], 'MKS', '100000.1 Pa'],

        # Pressure – CGS
        [['100000', 'Pa'], '+', ['1', 'Ba'], 'CGS', '1000001 Ba'],
        [['1', 'psi'], '+', ['1', 'Ba'], 'CGS', '68948.572932 Ba'],
        [['1', 'psi'], '+', ['100000', 'Pa'], 'CGS', '1068947.572932 Ba'],

        # Pressure – IMP
        [['1', 'psi'], '+', ['6894.76', 'Pa'], 'IMP', '2 psi'],
        [['1', 'Ba'], '+', ['1', 'psi'], 'IMP', '1.000015 psi'],
        [['100000', 'Pa'], '+', ['1', 'psi'], 'IMP', '15.503774 psi'],

        # Power – MKS
        [['1', 'W'], '+', ['1e7', 'erg/s'], 'MKS', '2 W'],
        [['1', 'ft*lbf/s'], '+', ['1.35582', 'W'], 'MKS', '2.711638 W'],
        [['10', 'ft*lbf/s'], '+', ['5', 'W'], 'MKS', '18.558179 W'],

        # Power – CGS
        [['1', 'W'], '+', ['1e7', 'erg/s'], 'CGS', '20000000 erg/s'],
        [['1', 'ft*lbf/s'], '+', ['1.35582', 'W'], 'CGS', '27116379.483314 erg/s'],
        [['10', 'ft*lbf/s'], '+', ['5', 'W'], 'CGS', '185581794.83314 erg/s'],

        # Power – IMP
        [['1', 'ft*lbf/s'], '+', ['1.35582', 'W'], 'IMP', '0.003636 hp'],
        [['10', 'W'], '+', ['1', 'ft*lbf/s'], 'IMP', '0.015228 hp'],
        [['10', 'ft*lbf/s'], '+', ['5', 'W'], 'IMP', '0.024887 hp'],
        ]

        for input_r in inputs:
            response = self.c.post("/operation/",data=json.dumps({'firstPart' : input_r[0], 'operant': input_r[1], 'secondPart': input_r[2], 'system':input_r[3]}), content_type="application/json")
            self.assertEqual(response.status_code, 200)
            self.assertEqual(response.json()["result"], input_r[-1])

    def test_rest_operants(self):
        inputs = [
        # Length – MKS
        [['10', 'm'], '-', ['10', 'cm'], 'MKS', '9.9 m'],
        [['10', 'cm'], '-', ['10', 'ft'], 'MKS', '-2.948 m'],
        [['10', 'ft'], '-', ['10', 'm'], 'MKS', '-6.952 m'],

        # Length – CGS
        [['10', 'cm'], '-', ['10', 'm'], 'CGS', '-990 cm'],
        [['10', 'cm'], '-', ['10', 'ft'], 'CGS', '-294.8 cm'],
        [['10', 'm'], '-', ['10', 'ft'], 'CGS', '695.2 cm'],

        # Length – IMP
        [['10', 'ft'], '-', ['10', 'm'], 'IMP', '-22.808399 ft'],
        [['10', 'ft'], '-', ['10', 'cm'], 'IMP', '9.671916 ft'],
        [['10', 'm'], '-', ['10', 'cm'], 'IMP', '32.480315 ft'],

        # Mass – MKS
        [['10', 'kg'], '-', ['1000', 'g'], 'MKS', '9 kg'],
        [['10', 'kg'], '-', ['1', 'slug'], 'MKS', '-4.593903 kg'],
        [['1000', 'g'], '-', ['1', 'slug'], 'MKS', '-13.593903 kg'],

        # Mass – CGS
        [['10', 'kg'], '-', ['1000', 'g'], 'CGS', '9000 g'],
        [['1', 'slug'], '-', ['1000', 'g'], 'CGS', '13593.902937 g'],
        [['1', 'slug'], '-', ['10', 'kg'], 'CGS', '4593.902937 g'],

        # Mass – IMP
        [['10', 'kg'], '-', ['1', 'slug'], 'IMP', '-0.314782 slug'],
        [['1', 'slug'], '-', ['1000', 'g'], 'IMP', '0.931478 slug'],
        [['1000', 'g'], '-', ['10', 'kg'], 'IMP', '-0.616696 slug'],

        # Velocity – MKS
        [['10', 'm/s'], '-', ['1000', 'cm/s'], 'MKS', '0'],
        [['10', 'm/s'], '-', ['10', 'ft/s'], 'MKS', '6.952 m/s'],
        [['1000', 'cm/s'], '-', ['10', 'ft/s'], 'MKS', '6.952 m/s'],

        # Velocity – CGS
        [['10', 'cm/s'], '-', ['1', 'm/s'], 'CGS', '-90 cm/s'],
        [['10', 'ft/s'], '-', ['10', 'cm/s'], 'CGS', '294.8 cm/s'],
        [['10', 'ft/s'], '-', ['1', 'm/s'], 'CGS', '204.8 cm/s'],

        # Velocity – IMP
        [['10', 'ft/s'], '-', ['1', 'm/s'], 'IMP', '6.71916 ft/s'],
        [['1000', 'cm/s'], '-', ['10', 'ft/s'], 'IMP', '22.808399 ft/s'],
        [['10', 'm/s'], '-', ['10', 'ft/s'], 'IMP', '22.808399 ft/s'],

        # Acceleration – MKS
        [['10', 'm/s^2'], '-', ['1000', 'cm/s^2'], 'MKS', '0'],
        [['10', 'ft/s^2'], '-', ['1', 'm/s^2'], 'MKS', '2.048 m/s^2'],
        [['1000', 'cm/s^2'], '-', ['10', 'ft/s^2'], 'MKS', '6.952 m/s^2'],

        # Acceleration – CGS
        [['10', 'cm/s^2'], '-', ['1', 'm/s^2'], 'CGS', '-90 cm/s^2'],
        [['10', 'ft/s^2'], '-', ['10', 'cm/s^2'], 'CGS', '294.8 cm/s^2'],
        [['10', 'ft/s^2'], '-', ['1', 'm/s^2'], 'CGS', '204.8 cm/s^2'],

        # Acceleration – IMP
        [['10', 'ft/s^2'], '-', ['1', 'm/s^2'], 'IMP', '6.71916 ft/s^2'],
        [['1000', 'cm/s^2'], '-', ['10', 'ft/s^2'], 'IMP', '22.808399 ft/s^2'],
        [['10', 'm/s^2'], '-', ['10', 'ft/s^2'], 'IMP', '22.808399 ft/s^2'],

        # Force – MKS
        [['10', 'N'], '-', ['1000000', 'dyne'], 'MKS', '0'],
        [['1', 'lbf'], '-', ['4', 'N'], 'MKS', '0.448222 N'],
        [['1', 'lbf'], '-', ['1000000', 'dyne'], 'MKS', '-5.551778 N'],

        # Force – CGS
        [['10', 'N'], '-', ['1000000', 'dyne'], 'CGS', '0'],
        [['1', 'lbf'], '-', ['1000000', 'dyne'], 'CGS', '-555177.838474 dyn'],
        [['10', 'N'], '-', ['1', 'lbf'], 'CGS', '555177.838474 dyn'],

        # Force – IMP
        [['1', 'lbf'], '-', ['4.44822', 'N'], 'IMP', '0'],
        [['1000000', 'dyne'], '-', ['1', 'lbf'], 'IMP', '1.248089 lbf'],
        [['10', 'N'], '-', ['1', 'lbf'], 'IMP', '1.248089 lbf'],

        # Energy – MKS
        [['10', 'J'], '-', ['1e7', 'erg'], 'MKS', '9 J'],
        [['1', 'ft*lbf'], '-', ['1.35582', 'J'], 'MKS', '-0.000002 J'],
        [['10', 'ft*lbf'], '-', ['5', 'J'], 'MKS', '8.558179 J'],

        # Energy – CGS
        [['10', 'J'], '-', ['1e7', 'erg'], 'CGS', '90000000 erg'],
        [['1', 'ft*lbf'], '-', ['1.35582', 'J'], 'CGS', '-20.516686 erg'],
        [['10', 'ft*lbf'], '-', ['5', 'J'], 'CGS', '85581794.83314 erg'],

        # Energy – IMP
        [['1', 'ft*lbf'], '-', ['1.35582', 'J'], 'IMP', '-0.000002 ft*lbf'],
        [['10', 'J'], '-', ['1', 'ft*lbf'], 'IMP', '6.375621 ft*lbf'],
        [['10', 'ft*lbf'], '-', ['5', 'J'], 'IMP', '6.312189 ft*lbf'],

        # Pressure – MKS
        [['100000', 'Pa'], '-', ['100000', 'Ba'], 'MKS', '90000 Pa'],
        [['1', 'psi'], '-', ['6894.76', 'Pa'], 'MKS', '-0.002707 Pa'],
        [['1', 'Ba'], '-', ['100000', 'Pa'], 'MKS', '-99999.9 Pa'],

        # Pressure – CGS
        [['100000', 'Pa'], '-', ['1', 'Ba'], 'CGS', '999999 Ba'],
        [['1', 'psi'], '-', ['1', 'Ba'], 'CGS', '68946.572932 Ba'],
        [['1', 'psi'], '-', ['100000', 'Pa'], 'CGS', '-931052.427068 Ba'],

        # Pressure – IMP
        [['1', 'psi'], '-', ['6894.76', 'Pa'], 'IMP', '0'], #aqui
        [['1', 'Ba'], '-', ['1', 'psi'], 'IMP', '-0.999985 psi'],
        [['100000', 'Pa'], '-', ['1', 'psi'], 'IMP', '13.503774 psi'],

        # Power – MKS
        [['1', 'W'], '-', ['1e7', 'erg/s'], 'MKS', '0'],
        [['1', 'ft*lbf/s'], '-', ['1.35582', 'W'], 'MKS', '-0.000002 W'],
        [['10', 'ft*lbf/s'], '-', ['5', 'W'], 'MKS', '8.558179 W'],

        # Power – CGS
        [['1', 'W'], '-', ['1e7', 'erg/s'], 'CGS', '0'],
        [['1', 'ft*lbf/s'], '-', ['1.35582', 'W'], 'CGS', '-20.516686 erg/s'],
        [['10', 'ft*lbf/s'], '-', ['5', 'W'], 'CGS', '85581794.83314 erg/s'],

        # Power – IMP
        [['1', 'ft*lbf/s'], '-', ['1.35582', 'W'], 'IMP', '0'],
        [['10', 'W'], '-', ['1', 'ft*lbf/s'], 'IMP', '0.011592 hp'],
        [['10', 'ft*lbf/s'], '-', ['5', 'W'], 'IMP', '0.011477 hp'],
    ]


        for input_r in inputs:
            response = self.c.post("/operation/",data=json.dumps({'firstPart' : input_r[0], 'operant': input_r[1], 'secondPart': input_r[2], 'system':input_r[3]}), content_type="application/json")
            self.assertEqual(response.status_code, 200)
            self.assertEqual(response.json()["result"], input_r[-1])

    def test_mult_operants(self):
        inputs = [
            [['3', 'm'], 'x', ['3', 'cm'], 'MKS', '0.09 m^2'],
            [['3', 'm'], 'x', ['3', 'ft'], 'MKS', '2.7432 m^2'],
            [['3', 'm'], 'x', ['3', 'kg'], 'MKS', '9 kg*m'],
            [['3', 'm'], 'x', ['3', 'g'], 'MKS', '0.009 kg*m'],
            [['3', 'm'], 'x', ['3', 'slug'], 'MKS', '131.345126 kg*m'],
            [['3', 'm'], 'x', ['3', 'm/s'], 'MKS', '9 m^2/s'],
            [['3', 'm'], 'x', ['3', 'cm/s'], 'MKS', '0.09 m^2/s'],
            [['3', 'm'], 'x', ['3', 'ft/s'], 'MKS', '2.7432 m^2/s'],
            [['3', 'm'], 'x', ['3', 'm/s^2'], 'MKS', '9 m^2/s^2'],
            [['3', 'm'], 'x', ['3', 'cm/s^2'], 'MKS', '0.09 m^2/s^2'],
            [['3', 'm'], 'x', ['3', 'ft/s^2'], 'MKS', '2.7432 m^2/s^2'],
            [['3', 'm'], 'x', ['3', 'N'], 'MKS', '9 J'],
            [['3', 'm'], 'x', ['3', 'dyne'], 'MKS', '0.00009 J'],
            [['3', 'm'], 'x', ['3', 'lbf'], 'MKS', '40.033995 J'],
            [['3', 'm'], 'x', ['3', 'J'], 'MKS', '9 J*m'],
            [['3', 'm'], 'x', ['3', 'erg'], 'MKS', '0.000001 J*m'],
            [['3', 'm'], 'x', ['3', 'ft*lbf'], 'MKS', '12.202362 J*m'],
            [['3', 'm'], 'x', ['3', 'Pa'], 'MKS', '9 kg/s^2'],
            [['3', 'm'], 'x', ['3', 'Ba'], 'MKS', '0.9 kg/s^2'],
            [['3', 'm'], 'x', ['3', 'psi'], 'MKS', '62052.815639 kg/s^2'],
            [['3', 'm'], 'x', ['3', 'W'], 'MKS', '9 m*W'],
            [['3', 'm'], 'x', ['3', 'erg/s'], 'MKS', '0.000001 m*W'],
            [['3', 'm'], 'x', ['3', 'ft*lbf/s'], 'MKS', '12.202362 m*W'],
            [['3', 'm'], 'x', ['3', ''], 'MKS', '9 m'],
            [['3', 'm'], 'x', ['3', 's'], 'MKS', '9 m*s'],
            [['3', 'm'], 'x', ['3', 'cm'],      'CGS', '900 cm^2'],
            [['3', 'm'], 'x', ['3', 'ft'],      'CGS', '27432 cm^2'],
            [['3', 'm'], 'x', ['3', 'kg'],      'CGS', '900000 cm*g'],
            [['3', 'm'], 'x', ['3', 'g'],       'CGS', '900 cm*g'],
            [['3', 'm'], 'x', ['3', 'slug'],    'CGS', '13134512.643486 cm*g'],
            [['3', 'm'], 'x', ['3', 'm/s'],     'CGS', '90000 St'],
            [['3', 'm'], 'x', ['3', 'cm/s'],    'CGS', '900 St'],
            [['3', 'm'], 'x', ['3', 'ft/s'],    'CGS', '27432 St'],
            [['3', 'm'], 'x', ['3', 'm/s^2'],   'CGS', '90000 cm^2/s^2'],
            [['3', 'm'], 'x', ['3', 'cm/s^2'],  'CGS', '900 cm^2/s^2'],
            [['3', 'm'], 'x', ['3', 'ft/s^2'],  'CGS', '27432 cm^2/s^2'],
            [['3', 'm'], 'x', ['3', 'N'],       'CGS', '90000000 erg'],
            [['3', 'm'], 'x', ['3', 'dyne'],    'CGS', '900 erg'],
            [['3', 'm'], 'x', ['3', 'lbf'],     'CGS', '400339945.373445 erg'],
            [['3', 'm'], 'x', ['3', 'J'],       'CGS', '8999999999.999998 cm*erg'],
            [['3', 'm'], 'x', ['3', 'erg'],     'CGS', '900 cm*erg'],
            [['3', 'm'], 'x', ['3', 'ft*lbf'],    'CGS', '12202361534.982599 cm*erg'],
            [['3', 'm'], 'x', ['3', 'Pa'],      'CGS', '9000 g/s^2'],
            [['3', 'm'], 'x', ['3', 'Ba'],      'CGS', '900 g/s^2'],
            [['3', 'm'], 'x', ['3', 'psi'],     'CGS', '62052815.638515 g/s^2'],
            [['3', 'm'], 'x', ['3', 'W'],       'CGS', '8999999999.999998 cm*erg/s'],
            [['3', 'm'], 'x', ['3', 'erg/s'],   'CGS', '900 cm*erg/s'],
            [['3', 'm'], 'x', ['3', 'ft*lbf/s'],  'CGS', '12202361534.982599 cm*erg/s'],
            [['3', 'm'], 'x', ['3', ''],     'CGS', '900 cm'],
            [['3', 'm'], 'x', ['3', 's'],       'CGS', '900 cm*s'],
            [['3', 'm'], 'x', ['3', 'cm'],     'IMP', '0.968752 ft^2'],
            [['3', 'm'], 'x', ['3', 'ft'],     'IMP', '29.527559 ft^2'],

            [['3', 'm'], 'x', ['3', 'kg'],     'IMP', '2.02328 ft*slug'],
            [['3', 'm'], 'x', ['3', 'g'],      'IMP', '0.002023 ft*slug'],
            [['3', 'm'], 'x', ['3', 'slug'],   'IMP', '29.527559 ft*slug'],

            [['3', 'm'], 'x', ['3', 'm/s'],    'IMP', '96.875194 ft^2/s'],
            [['3', 'm'], 'x', ['3', 'cm/s'],   'IMP', '0.968752 ft^2/s'],
            [['3', 'm'], 'x', ['3', 'ft/s'],   'IMP', '29.527559 ft^2/s'],
            [['3', 'm'], 'x', ['3', 'm/s^2'],  'IMP', '96.875194 ft^2/s^2'],
            [['3', 'm'], 'x', ['3', 'cm/s^2'], 'IMP', '0.968752 ft^2/s^2'],
            [['3', 'm'], 'x', ['3', 'ft/s^2'], 'IMP', '29.527559 ft^2/s^2'],

            [['3', 'm'], 'x', ['3', 'N'],      'IMP', '6.638059 ft*lbf'],
            [['3', 'm'], 'x', ['3', 'dyne'],   'IMP', '0.000066 ft*lbf'],
            [['3', 'm'], 'x', ['3', 'lbf'],    'IMP', '29.527559 ft*lbf'],

            [['3', 'm'], 'x', ['3', 'J'],      'IMP', '21.77841 ft^2*lbf'],
            [['3', 'm'], 'x', ['3', 'erg'],    'IMP', '0.000002 ft^2*lbf'],
            [['3', 'm'], 'x', ['3', 'ft*lbf'],   'IMP', '29.527559 ft^2*lbf'],

            [['3', 'm'], 'x', ['3', 'Pa'],     'IMP', '0.004283 ft*psi'],
            [['3', 'm'], 'x', ['3', 'Ba'],     'IMP', '0.000428 ft*psi'],
            [['3', 'm'], 'x', ['3', 'psi'],    'IMP', '29.527559 ft*psi'],

            [['3', 'm'], 'x', ['3', 'W'],      'IMP', '21.77841 ft^2*lbf/s'],
            [['3', 'm'], 'x', ['3', 'erg/s'],  'IMP', '0.000002 ft^2*lbf/s'],
            [['3', 'm'], 'x', ['3', 'ft*lbf/s'], 'IMP', '29.527559 ft^2*lbf/s'],

            [['3', 'm'], 'x', ['3', ''],    'IMP', '29.527559 ft'],
            [['3', 'm'], 'x', ['3', 's'],      'IMP', '29.527559 ft*s'],
        ]

        for input_r in inputs:
            response = self.c.post("/operation/",data=json.dumps({'firstPart' : input_r[0], 'operant': input_r[1], 'secondPart': input_r[2], 'system':input_r[3]}), content_type="application/json")
            self.assertEqual(response.status_code, 200)
            self.assertEqual(response.json()["result"], input_r[-1])